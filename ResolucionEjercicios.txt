Notas:

- Example1_1 y Exa,ple 1_4 tenía un error, esperaba "int main", en vez de solo "main"
- Example1_1 cuenta "/n" como contador de líneas en el archivo, por lo que si solo hay una línea sin "/n", dice que no hay lineas en el archivo.
- A la hora de unir flex con bison se generaron varios errores dado que el libro es muy viejo para las versiones actuales de los programas, de hecho, en  las versiones de bison actuales no se suele utilizar ya un main, la página oficial recomienda no hacerlo y seguir una estructura diferente.
- El ejemplo 5: codigo de bison, contiene un error a la hora de apuntar a la expresion para imprimirla


Punto 1:
La calculadora tal cual está actualmente (Guiada por el libro) no acepta una linea solo con un codigo, el problema no es cuestion el scaner, porque este lee bien "//" el problema es una linea sin "exp" ya que en el calclist dice que si o si debe tener una expresion, y al no tenerla manda el syntax error, entonces la manera en la que lo resolvimos fue poniendo otra accion en esa regla, de que si hay una linea sin expresión, que no haga nada, entonces no bota error y el programa sigue, permitiendo hacer los comentarios, y líneas vacias.


Punto 2:
Ya implementado en la calculadora

Punto 3:
No pasa nada si vuelvo a utilizar el simbolo "|" ya que la regla de implementación es distinta, enotnces él escoge la acción según la estructura, originalmente el absoluto es "Abs term", y el OR sería "exp ABS factor". Nosotros luego cambiamos la estructura de absoluto a "Abs term Abs" para que se identificara la diferencia visualmente.


Punto 4:
Si se refiere a la diferencia entre "SimpleFlexScanner" (Example 3) y "CalculatorScanner" (Example 4), radica en que mientras en el primero "+" es ADD, en el segundo "+" es "259" que sería el token. Si reconoce los mismos tokens, pero el código de acción es diferente, en el ejemplo 4 para cada uno de los tokens, el escáner devuelve el código correspondiente al token.
(En la versión manuscrita tiene como tokens los definidos a partir del numero 258, en teoría, en los programas mas avanzado flex lo hace de manera interna, no hay necesidad de declararlos manualmente).
Si se refiere a la comparación respecto a la calculadora con flex y bison contra la de C y bison, ambas reconocen los mismos tokens para operadores aritméticos básicos (+, -, *, /), paréntesis (( y )), valor absoluto y nueva línea. Ambas versiones utilizan una lógica similar para identificar y devolver estos tokens basándose en los caracteres o patrones de entrada, entonces se ve que ambas versiones son funcionalmente equivalentes, ya que reconocen el mismo conjunto de tokens y realizan la tokenización de forma coherente.

Punto 5:
Flex, aunque es eficiente en la tokenización y el análisis de texto basado en expresiones regulares, no es una opción ideal para el procesamiento del lenguaje natural (NLP) debido a las complejidades propias de idiomas como el español. Los lenguajes naturales presentan patrones irregulares que van más allá de lo que una expresion regular puede manifestar. Intentar expresar los matices de la tokenización y el análisis sintáctico del lenguaje natural mediante Flex puede dar un código enredado y propenso a errores. En el libro explica que no se debe dar capo a ambiguedad y las jerarquías deben ser claras pues es un generador de léxico determinista, complicando dramáticamente la tarea de tokenizar y analizar con precisión la entrada.
También, podemos hablar de dificultad en los lenguajes de programación con una sintaxis muy irregular o compleja, como JavaScript, entonces puede no ser adecuado para el análisis léxico utilizando sólo Flex, teniendo en cuenta lo ya mencionado, que Flex funciona mejor con lenguajes que tienen patrones léxicos (relativamente) regulares y predecibles.

Punto 6:
Véase comparación en la imagen ComparationRsults.png


