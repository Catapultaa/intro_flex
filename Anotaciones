Notas:

- Example1_1 y Exa,ple 1_4 tenía un error, esperaba "int main", en vez de solo "main"
- Example1_1 cuenta "/n" como contador de líneas en el archivo, por lo que si solo hay una línea sin "/n", dice que no hay lineas en el archivo.
- A la hora de unir flex con bison se generaron varios errores dado que el libro es muy viejo para las versiones actuales de los programas, de hecho, en  las versiones de bison actuales no se suele utilizar ya un main, la página oficial recomienda no hacerlo y seguir una estructura diferente.

Punto 4:
La diferencia entre "SimpleFlexScanner" (Example 3) y "CalculatorScanner" (Example 4) radica en que mientras en el primero "+" es ADD, en el segundo "+" es "259" que sería el token. Si reconoce los mismos tokens, pero el código de acción es diferente, en el ejemplo 4 para cada uno de los tokens, el escáner devuelve el código correspondiente al token.
(En la versión manuscrita tiene como tokens los definidos a partir del numero 258, en teoría, en los programas mas avanzado flex lo hace de manera interna, no hay necesidad de declararlos manualmente).

Punto 5:
Flex, aunque es eficiente en la tokenización y el análisis de texto basado en expresiones regulares, no es una opción ideal para el procesamiento del lenguaje natural (NLP) debido a las complejidades propias de idiomas como el español. Los lenguajes naturales presentan patrones irregulares que van más allá de las capacidades de las expresiones regulares, que son la base de Flex. Intentar expresar los matices de la tokenización y el análisis sintáctico del lenguaje natural mediante Flex puede dar un código enredado y propenso a errores.Además, los lenguajes naturales suelen contener palabras y frases ambiguas y Flex, al ser un generador de léxico determinista, complica dramáticamente la tarea de tokenizar y analizar con precisión la entrada.
También, podemos hablar de los lenguajes de programación con una sintaxis muy irregular o compleja, como Perl o JavaScript, pueden no ser adecuados para el análisis léxico utilizando sólo Flex, teniendo en cuenta lo ya mencionado, que Flex funciona mejor con lenguajes que tienen patrones léxicos (relativamente) regulares y predecibles.

Punto 6:
Véase comparación en la imagen ComparationRsults.png


